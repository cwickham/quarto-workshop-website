{
  "hash": "ae7925d96d4975cf278726d1205bbeea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Documents: YAML + Markdown Basics\"\nsubtitle: \"Intro Quarto @ Cascadia R Conf\"\nformat: \n  revealjs:\n    code-overflow: wrap\n---\n\n\n\n\n\n\n## {data-visibility=\"hidden\"}\n\n::: task\nWhere does the name \"Quarto\" come from?\n:::\n\n. . .\n\n\n\n\n```{=html}\n<iframe src=\"https://en.wikipedia.org/wiki/Quarto\" title = \"Quarto on Wikipedia\" frameborder=\"1\" height=\"400\" width=\"900\"></iframe>\n```\n\n\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Quarto>\n:::\n\n# Anatomy of a Quarto document\n\n## Components\n\n1.  Metadata: YAML\n\n2.  Text: Markdown\n\n3.  Code: Executed via `knitr` or `jupyter`\n\n. . .\n\n**Weave it all together**, and you have beautiful, powerful, and useful outputs!\n\n## Literate programming {.smaller data-visibility=\"hidden\"}\n\nLiterate programming is writing out the program logic in a human language with included code snippets (separated by a primitive markup) and macros.\n\n````         \n---\ntitle: \"ggplot2 demo\"\ndate: \"5/19/2023\"\nformat: html\n---\n\n## MPG\n\nThere is a relationship between city and highway mileage.\n\n```{{r}}\n#| label: fig-mpg\n\nlibrary(ggplot2)\n\nggplot(mpg, aes(x = cty, y = hwy)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n````\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Literate_programming>\n:::\n\n# Metadata\n\n## YAML\n\n\"Yet Another Markup Language\" or \"YAML Ain't Markup Language\" is used to provide document level metadata ...\n\n. . .\n\n... in key-value pairs,\n\n. . .\n\n... that can nest,\n\n. . .\n\n... are fussy about indentation,\n\n. . .\n\n... and are kept between `---`.\n\n\n``` yaml\n---\nkey: value\n---\n```\n\n## Example: Output options\n\n``` yaml\n---\nformat: something\n---\n```\n\n. . .\n\n<br>\n\n``` yaml\n---\nformat: html\n---\n```\n\n``` yaml\n---\nformat: pdf\n---\n```\n\n``` yaml\n---\nformat: revealjs\n---\n```\n\n## Example: Indented nesting\n\nIndentation matters!\n\n``` yaml\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n\n## Fussing with YAML (invalid) {.smaller}\n\n-   Invalid: No space after `:`\n\n``` yaml\n---\nformat:html\n---\n```\n\n-   Invalid: Read as missing\n\n``` yaml\n---\nformat:\nhtml\n---\n```\n\n-   Valid, but needs next object\n\n``` yaml\n---\nformat: \n  html:\n---\n```\n\n## Fussing with YAML (valid) {.smaller}\n\nThere are multiple ways of formatting valid YAML:\n\n-   Valid: There's a space after `:`\n\n``` yaml\nformat: html\n```\n\n-   Valid: There is a new line, 2 spaces, and no trailing `:`\n\n``` yaml\nformat:\n  html\n```\n\n-   Valid: `format: html` with additional options made with proper indentation\n\n``` yaml\nformat: \n  html:\n    toc: true\n```\n\n## Why YAML?\n\nTo avoid manually typing out all the options, every time when rendering via the CLI:\n\n. . .\n\n``` bash\nquarto render document.qmd --to html\n```\n\n<br>\n\n. . .\n\n``` bash\nquarto render document.qmd --to html -M code-fold:true\n```\n\n<br>\n\n. . .\n\n``` bash\nquarto render document.qmd --to html -M code-fold:true -P alpha:0.2 -P ratio:0.3\n```\n\n## Quarto linting\n\nLint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.\n\n![](images/lint-rstudio.png){width=80%}\n\n::: aside\nSource: <https://en.wikipedia.org/wiki/Lint_(software)>\n:::\n\n## Quarto YAML Intelligence\n\nRStudio + VSCode provide rich tab-completion - start a word and tab to complete, or <kbd>`Ctrl + space`</kbd> to see all available options.\n\n<br>\n\n![](images/quarto-tab-complete.png){fig-align=\"center\" width=\"600\"}\n\n## Your turn\n\n::: task\n-   Open `hello-penguins.qmd` in RStudio.\n-   Try <kbd>`Ctrl + space`</kbd> to see the available YAML options.\n-   Try out the tab-completion of any options that sound interesting.\n-   You can use the [HTML reference](https://quarto.org/docs/reference/formats/html.html) as needed.\n-   Share one you tried with your neighbor.\n:::\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_d3cf09d3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## List of valid YAML fields\n\n-   Many YAML fields are common across various outputs\n\n-   But also each output type has its own set of valid YAML fields and options\n\n-   Definitive list: [quarto.org/docs/reference/formats/html](https://quarto.org/docs/reference/formats/html.html)\n\n# Text\n\n<https://quarto.org/docs/authoring/markdown-basics.html> \n\n## Text Formatting\n\n+-------------------------------+-------------------------------+\n| Markdown Syntax               | Output                        |\n+===============================+===============================+\n| ```                           | *italics* and **bold**        |\n| *italics* and **bold**        |                               |\n| ```                           |                               |\n+-------------------------------+-------------------------------+\n| ```                           | superscript^2^ / subscript~2~ |\n| superscript^2^ / subscript~2~ |                               |\n| ```                           |                               |\n+-------------------------------+-------------------------------+\n| ```                           | ~~strikethrough~~             |\n| ~~strikethrough~~             |                               |\n| ```                           |                               |\n+-------------------------------+-------------------------------+\n| ```                           | `verbatim code`               |\n| `verbatim code`               |                               |\n| ```                           |                               |\n+-------------------------------+-------------------------------+\n\n: {tbl-colwidths=\"\\[50,50\\]\"}\n\n## Headings {.smaller}\n\n+-----------------+-----------------+\n| Markdown Syntax | Output          |\n+=================+=================+\n| ```             | # Header 1      |\n| # Header 1      |                 |\n| ```             |                 |\n+-----------------+-----------------+\n| ```             | ## Header 2     |\n| ## Header 2     |                 |\n| ```             |                 |\n+-----------------+-----------------+\n| ```             | ### Header 3    |\n| ### Header 3    |                 |\n| ```             |                 |\n+-----------------+-----------------+\n| ```             | #### Header 4   |\n| #### Header 4   |                 |\n| ```             |                 |\n+-----------------+-----------------+\n| ```             | ##### Header 5  |\n| ##### Header 5  |                 |\n| ```             |                 |\n+-----------------+-----------------+\n| ```             | ###### Header 6 |\n| ###### Header 6 |                 |\n| ```             |                 |\n+-----------------+-----------------+\n\n: {tbl-colwidths=\"\\[50,50\\]\"}\n\n## Links {.smaller}\n\nThere are several types of \"links\" or hyperlinks.\n\n::: columns\n::: {.column width=\"60%\"}\n**Markdown**\n\n``` markdown\nYou can embed [named hyperlinks](https://quarto.org/),\ndirect urls like <https://quarto.org/>, and links to \n[other places](#quarto-anatomy) in \nthe document. The syntax is similar for embedding an\ninline image: ![Penguins playing with ball](images/penguins-quarto-ball.png).\n```\n:::\n\n::: {.column .fragment width=\"40%\"}\n**Output**\n\nYou can embed [named hyperlinks](https://quarto.org/), direct urls like <https://quarto.org/>, and links to [other places](#quarto-anatomy) in the document. The syntax is similar for embedding an inline image: ![Penguins playing with ball](images/penguins-quarto-ball.png){style=\"width:250px;\"}.\n:::\n:::\n\n## Markdown figures\n\n```         \n![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)\n```\n\n![Penguins playing with a Quarto ball](images/penguins-quarto-ball.png)\n\n## Markdown figures with options\n\n::: columns\n::: {.column width=\"50%\"}\n```         \n![](images/penguins-quarto-ball.png){fig-align=\"left\" width=250}\n```\n\n![](images/penguins-quarto-ball.png){fig-align=\"left\" width=250}\n:::\n\n::: {.column width=\"50%\"}\n```         \n![](images/penguins-quarto-ball.png){fig-align=\"right\" width=250 fig-alt=\"Illustration of two penguins playing with a Quarto ball.\"}\n```\n\n![](images/penguins-quarto-ball.png){fig-align=\"right\" width=250 fig-alt=\"Illustration of two penguins playing with a Quarto ball.\"}\n:::\n:::\n\n## Lists {.smaller}\n\nUnordered list:\n\n::: columns\n::: {.column width=\"50%\"}\n**Markdown:**\n\n``` markdown\n-   unordered list         \n    -   sub-item 1         \n    -   sub-item 1         \n        -   sub-sub-item 1 \n```\n:::\n\n::: {.column .fragment width=\"50%\" fragment-index=\"1\"}\n**Output**\n\n-   unordered list\n    -   sub-item 1\\\n    -   sub-item 1\n        -   sub-sub-item 1\n:::\n:::\n\nOrdered list:\n\n::: columns\n::: {.column width=\"50%\"}\n**Markdown:**\n\n``` markdown\n1. ordered list            \n2. item 2                  \n   i. sub-item 1          \n      A.  sub-sub-item 1\n```\n:::\n\n::: {.column .fragment width=\"50%\" fragment-index=\"2\"}\n**Output**\n\n1.  ordered list\\\n2.  item 2\n    i.  sub-item 1\n        A.  sub-sub-item 1\n:::\n:::\n\n## Quotes\n\n**Markdown:**\n\n``` markdown\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. \n> - Donald Knuth, Literate Programming\n```\n\n. . .\n\n**Output:**\n\n> Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth, Literate Programming\n\n::: aside\n\"Literate Programming\", The Computer Journal 27 (1984), p. 97. (Reprinted in Literate Programming, 1992, p. 99.) Literate Programming (1984)\n:::\n\n## Your turn\n\n::: task\n-   Open `markdown-syntax.qmd` in RStudio.\n-   Follow the instructions in the document for how to modify it.\n:::\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_396e2d6d\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}