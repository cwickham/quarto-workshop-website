---
title: "Documents: Figures/Tables + Code"
subtitle: "Intro Quarto @ Cascadia R Conf"
format: revealjs
---

```{r}
#| label: setup
#| include: false

# set width of code output
options(width = 65)

# load background packages
library(countdown)
```

# Tables

## Markdown tables (aka Pipe Tables)

**Markdown:**

``` markdown
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
```

. . .

**Output:**

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |

## Grid tables

**Markdown:**

``` markdown
+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+

: Sample grid table.
```

## Grid tables

**Output:**

+---------------+---------------+----------------------+
| Fruit         | Price         | Advantages           |
+===============+===============+======================+
| Bananas       | \$1.34        | -   built-in wrapper |
|               |               | -   bright color     |
+---------------+---------------+----------------------+
| Oranges       | \$2.10        | -   cures scurvy     |
|               |               | -   tasty            |
+---------------+---------------+----------------------+

: Sample grid table.

## Grid tables: Alignment {data-visibility="hidden"}

-   Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:

```         
+---------------+---------------+--------------------+
| Right         | Left          | Centered           |
+==============:+:==============+:==================:+
| Bananas       | $1.34         | built-in wrapper   |
+---------------+---------------+--------------------+
```

. . .

-   For headerless tables, the colons go on the top line instead:

```         
+--------------:+:--------------+:------------------:+
| Right         | Left          | Centered           |
+---------------+---------------+--------------------+
```

## Grid tables: Authoring

-   Tables are awkward to write with a plain text editor.
-   Use the Visual Editor!

::: {.columns}
::: {.column}
![](images/rstudio-insert-table.png)
:::

::: {.column}
![](images/rstudio-table-menu.png)
:::
::: 


## Tables from code {.smaller}

The **knitr** package can turn data frames into tables with `knitr::kable()`:

```{r}
library(knitr)
library(palmerpenguins)

head(penguins) |> 
  kable()
```

## Tables from code {.smaller}

If you want fancier tables, try the **gt** package and [all that it offers](https://gt.rstudio.com/)!

```{r}
#| output-location: column-fragment

library(gt)
library(palmerpenguins)

head(penguins) |> 
  gt() |>
  tab_style(
    style = list(
      cell_fill(color = "pink"),
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = bill_length_mm,
      rows = bill_length_mm > 40
    )
  )
```


# Cross references

## Cross references

-   Help readers to navigate your document with numbered references and hyperlinks to entities like figures and tables.

-   Cross referencing steps:

    -   Add a caption to your figure or table.
    -   Give an id to your figure or table, starting with `fig-` or `tbl-`.
    -   Refer to it with `@fig-...` or `@tbl-...`.

## A figure example 

The presence of the caption (`Blue penguin`) and label (`#fig-blue-penguin`) make this figure referenceable:

**Markdown:**

``` markdown
See @fig-blue-penguin for a cute blue penguin.
![Blue penguin](images/blue-penguin.png){#fig-blue-penguin}
```
**Output:**

See @fig-blue-penguin for a cute blue penguin.

![Blue Penguin](images/blue-penguin.png){#fig-blue-penguin fig-alt="A blue penguin" width="200"}

## Figure cross references

**Figure from a file**:

``` markdown
![Caption](image.png){#fig-my-label}
```
\

**Figure from code**:

```` markdown
```{{r}}
#| label: fig-my-label
#| fig-cap: Caption

# ...
```
````

## Table cross references 

**Markdown Table**:

``` markdown
| Right | Left |
|------:|:-----|
|   12  |  12  |
|  123  |  123 |

: Caption {#tbl-my-label}
```
\

**Table from code**:

```` markdown
```{{r}}
#| label: tbl-my-label
#| tbl-cap: Caption

# ...
```
````

## Your turn

::: task
-   Open `tables-figures.qmd`.
-   Follow the instructions in the document.
-   Exchange one new thing you've learned with your neighbor.
:::

```{r}
#| echo: false

countdown(minutes = 8)
```


# Quarto Elements

## Example: Callout Blocks {auto-animate=true}

Use case: highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%" .fragment}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column .fragment width="50%"}
#### HTML output

::: callout-note
Look - a squirrel!
:::

::: callout-important
Look - a squirrel!
:::

::: callout-tip
Look - a squirrel!
:::
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column width="50%"}
#### pdf output

![](images/callouts-pdf.png)
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column width="50%"}
#### docx output

![](images/callouts-doc.png)
:::

\
\
:::

## Callouts are an example of a Fenced Div 

![](images/quarto-workshop-12.jpg){fig-align="center"}

One way Quarto extends the types of thing you can add to a document

## Your turn

::: task
-   Open `callout-boxes.qmd` and render the document.
-   Change the type of the first callout box and then re-render. Also try adding attributes inside `{ }` to learn what they do.
    - `icon=true` or `icon=false`.
    - `appearance="simple"` (can also try `"minimal"` and `"default"`).
-   Make the second callout box collapsible.
-   Change the format to PDF and re-render.
:::

```{r}
#| echo: false

countdown(minutes = 5)
```

# Code

## Quarto's Code Cell

::: columns
::: {.column width="50%"}
    ```{{language}}
    #| echo: false

    code
    ```
:::

::: {.column width="50%"}
-   Executable code flagged by `{}`
-   Support R, Python, Julia
-   Also support `mermaid` and `dot` diagram languages[^3]
-   Cell options live inside the cell after `#|` (the hash pipe!)[^4]

:::
:::

[^3]: See <https://quarto.org/docs/authoring/diagrams.html>.

[^4]: The hash pipe is available in the R Markdown too.

## Compare to R Markdown's Code Chunk

::: columns
::: {.column width=50%}
    ```{{r, echo=FALSE}}
    rnorm(3)
    ```
:::

::: {.column width=50%}
* Only R (`python` chunks get executed in R)
* Options are set inside `{}`
* Option values are R, e.g. `FALSE` 
:::

:::

## Execution Options

Control how the code is executed with options.

::: {style="font-size: .8em"}
| Option    | Description                                                                                                                                                                                       |
|------------|------------------------------------------------------------|
| `eval`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |
| `echo`    | Include the source code in output                                                                                                                                                                 |
| `output`  | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown). |
| `warning` | Include warnings in the output.                                                                                                                                                                   |
| `error`   | Include errors in the output.                                                                                                                                                                     |
| `include` | Catch all for preventing any output (code or results) from being included (e.g. `include: false` suppresses all output from the code block).                                                      |
:::


##  {menu-title="YAML Intelligence"}

\
\

[Don't forget to use ctrl-space to see the available options!]{style="align: center"}

![](images/code-yaml-intelligence.png){width="100px"}

## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="7"}
---
title: My Doc
format: html
---

```{{r}}
#| echo: true

pi + 1
```
````
:::
:::

## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="4,5"}
---
title: My Doc
format: html
execute:
  echo: true
---

```{{r}}
pi + 1
```
````
:::
:::{.column width=50%}
- Options can be moved into YAML under the `execute` key to apply to all chunks. Exceptions to that option can be set cell-by-cell.
:::
:::

## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="6-8"}
---
title: My Doc
format: html
execute:
  echo: true
knitr:
  opts_chunk: 
    collapse: true
---

```{{r}}
pi + 1
```
````
:::
:::{.column width=50%}
- Options can be moved into YAML under the `execute` key to apply to all chunks. Exceptions to that option can be set cell-by-cell.

- You can also pass options via YAML to knitr through the `knitr` key[^setup1].
:::
:::

[^setup1]: No more ````{r setup}`!


## From Cell Option to YAML {auto-animate=true}

:::columns
:::{.column width=50%}
````{.markdown code-line-numbers="9-10"}
---
title: My Doc
format: html
execute:
  echo: true
knitr:
  opts_chunk: 
    collapse: true
    R.options:
      digits: 2
---

```{{r}}
pi + 1
```
````
:::
:::{.column width=50%}
- Options can be moved into YAML under the `execute` key to apply to all chunks. Exceptions to that option can be set cell-by-cell.

- You can also pass options via YAML to knitr through the `knitr` key[^setup2].

- You can use knitr to pass options that control your R session.
:::
:::

[^setup2]: No more ````{r setup}`!


## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=50%}
````markdown
```{{r}}
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point()
```
````
:::
:::{.column width=50% .fragment}
```{r}
#| echo: false
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=50%}
````markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point()
```
````
:::
:::{.column width=50% .fragment}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| 
library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

## Example: Figures from Code {auto-animate=true}

:::columns
:::{.column width=50%}
````markdown
```{{r}}
#| fig-width: 5
#| fig-height: 3
#| fig-cap: Size of penguins on three islands in the Palmer Archipelago.
#| fig-alt: Scatterplot showing the bill sizes of penguins across three islands.

library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point()
```
````
:::
:::{.column width=50% .fragment}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 3
#| fig-cap: "Size of penguins on three islands in the Palmer Archipelago."
#| fig-alt: "Scatterplot showing the bill sizes of penguins across three islands."


library(palmerpenguins)
library(ggplot2)

ggplot(penguins, aes(x = bill_length_mm,
                     y = bill_depth_mm,
                     col = island)) +
  geom_point() +
  theme_grey(base_size = 18)
```
:::
:::

. . .

> Save time/code by moving figure sizing defaults up to the YAML.

## Your turn

::: task
-   Open `code-cells.qmd` and render the document.
-   Add `echo: false` to the code cell and re-render.
-   Add more cell options by using  Ctrl + Space after the `#|` or consult the [Quarto Reference](https://quarto.org/docs/reference/cells/cells-knitr.html).
-   Add a second code cell (you can copy + paste the first), move your cell options to the YAML, and re-render.
:::

```{r}
#| echo: false

countdown(minutes = 7)
```
